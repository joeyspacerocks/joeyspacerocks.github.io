<?xml version="1.0"?>
<posts>
  <post>
    <postid>5qu1ffjdc</postid>
    <title><![CDATA[QB1-0 version 1.3 released]]></title>
    <body><![CDATA[<p><img src="http://lh4.ggpht.com/0lTfYeN8dJOGxxo9hSkik808_6frBsUSVVO_sd1jJoKuTLPmyDx7gI2LoOq8RlyKkKLqO3uby4jotrYLcwA=s600" alt="" /></p><p>Version 1.3 of QB1-0 was released to the App Store today!</p><iframe width="640" height="360" src="//www.youtube.com/embed/2h81BalrfS4?rel=0" frameborder="0" allowfullscreen=""></iframe><p>A small update this time, but I fixed a few things that have annoyed me since the original launch:</p><ul>
<li>iPhone 6/6+ native resolution support</li><li>Fix to off-screen spawning of enemies preventing delays before they arrive</li><li>Cleared link to instructions on title screen</li><li>Minor tweak to firing spread</li><li>Upgraded Game Centre integration&nbsp;to remove deprecated calls</li><li>App Store preview video</li></ul><p>QB1-0 plays really well on an iPhone 6 so I'm pretty pleased with it.</p><p>I'm looking forwards to the reboot project where I'm aiming to expand the game&nbsp;in some new directions.</p><p><a href="https://itunes.apple.com/us/app/qb1-0/id580175669?ls=1&amp;mt=8">Download from the App Store now!</a></p>]]></body>
    <date>Mon, 03 Nov 2014 09:36:51 GMT</date>
    <link>5qu1ffjdc</link>
  </post>
  <post>
    <postid>5kvzytveq</postid>
    <title><![CDATA[How to make games the hard way]]></title>
    <body><![CDATA[<p><img src="http://lh5.ggpht.com/OJupbka8naWm7lNvYS-KpvxjlRrK3lyr_kyxSOY7VYg7onuTd3-Z0TWCcwmCi_ZlpRK1FvI25X3CTcwBA9kq=s600" alt="" /></p><p>I first started writing computer games&nbsp;a long time ago. In human terms obviously, I mean we're not talking epochs here.&nbsp;I don't want to date myself (although I'd make a terrific date), but back then pixel art was called 'computer graphics' and 3D graphics were known as 'Elite'.</p><p>If you wanted to make a game on any of the popular home computers of the age your language choices were pretty much Basic or assembler. Except that for most games Basic was too slow, so assembler it was. There were no frameworks, libraries or tools. Often there were only four colours, and one of them was black. Heck, half the time&nbsp;pixels weren't even square.</p><p>You learnt assembler from a manual, by studying type-in games in magazines and (a bit later) by reading the source code of public domain software sent through the post.</p><p>It was hard work but immensely satisfying. The code you wrote was your own, as were the bugs. When things finally worked there was a genuine sense of achievement.</p><p>Fast forward to 2014. To make a game today you have a plethora of choices regarding your target&nbsp;platform, the&nbsp;frameworks and libraries you use,&nbsp;languages and tools. You can throw together prototypes extremely quickly and for many tasks you&nbsp;don't even need to write much code.</p><p>Sounds great doesn't it? And it is for many people, especially those&nbsp;whose real passion leans more towards the design and artistic side.</p><p>Of course it also means the barrier of entry is lower. You can make a lower-quality game with almost no real technical skills at all and throw it up on an app store in a few days.&nbsp;Making a polished, interesting and well-designed game still requires a massive amount of skill and effort but that just means that&nbsp;the tools available allow us to create far more complex games than would previously&nbsp;have been possible.</p><p>So,&nbsp;given all of that, why in the wide,&nbsp;wide world of sports would someone (i.e. me) reject all of this and still be building games in low-level languages and shunning the higher level frameworks?</p><p>To answer that we need to examine why games development is so enticing in the first place. Making a game involves many different areas of creativeness. There's obviously programming, but more than that you need to tackle a swathe of different topics that you don't often&nbsp;get exposed to when building&nbsp;other things.</p><p>For example, the average 2D game will require graphics code (2D sprites), basic physics (movement, gravity), collision detection and response, spatial partitioning, UI design, input handling, audio interfaces, performance tuning and memory management and that's before you even get to the game logic.</p><p>If you're building it yourself there's also art creation, sound and music composition and level design.</p><p><img src="http://lh5.ggpht.com/Yh4Bu8W9-E6GWrfGyQtt_fqu5sqdGyFElkQimmH6abqYQtbauac1lvWeWZXppDNl2BqqEUD-JaoGGQXrQ1I=s1143"></p><p>So the act of creation itself can be hugely satisfying - plus the end product is something that people will (hopefully) enjoy! Now I'm not knocking the B2B websites and commerce platforms that I spend my daylight hours glueing together, but ... when was the last time you had someone tell you how much fun they had using that reporting tool you built for&nbsp;them?</p><p>Using a modern&nbsp;tool like Unity or GameMaker to build a 2D platformer gives you the&nbsp;game loop,&nbsp;level structures, sprite systems, animations, sound systems,&nbsp;effects, input, plus something that's increasingly important nowadays - cross-platform builds.</p><p>The problem for me is that it also taken away some of the fun of building the game. The low-level mechanics are what brought me to game development in the first place. It's how I use a project (almost used the word 'leverage' there - yikes) to learn new ways of approaching problems and sometimes completely different areas of expertise.</p><p>Increasingly I also find that for the kinds of games I'm making it's really not that much of an overhead to do it all myself anyway. Most of my time ends up in trying to design a decent game, not in the actual technical solutions.&nbsp;</p><p>For example,&nbsp;<a href="http://qb1-0.canfactory.com">QB1-0</a> (an asteroidy space-shooter) has very basic mechanics. The graphics are essentially a bunch of OpenGL line and point draws, the physics is implemented using a basic position, velocity, force system and the sound ... well, let's not talk about the sound, ok?</p><p><img src="http://lh5.ggpht.com/YuFn4p2vroe6fPBlO5tKTIN8-TW7_ptV3M_g62NVPGHTxpc85B5Iv1CEcCPEkgkOMorC_q2rVOL03ay7lyvm=s980"></p><p>I didn't build a 'framework' or an 'engine' to make that game. I just built the game. When I started my next game (<a href="http://forums.tigsource.com/index.php?topic=42130">Spooky Pooky</a>), a platformer, I ripped out some of the QB1-0 code and hacked away at it to morph it into something more appropriate for that new game.</p><p>The code bases end up pretty lean and easy to understand and hack new features into because they don't contain anything that's not required by the game.</p><p>So far so good. I've convinced you of nothing and you're mentally listing all the reasons why I'm a fool and why aren't I just using Unity and what's for lunch anyway?</p><p>Let's step things up a bit. So I write my own code. Whilst eschewing all the fabulous and free help available to me I thought to myself, you know what Joeyspacerocks? This is too easy. For a real challenge why don't we ditch the last 30 years of language innovations and build the games in C? Who needs objects anyway?</p><p>Obviously it doesn't take a trained psychologist to spot that this is an extreme reaction against the shackles of a modern software engineer's day job, where you're up to your eyebrows in objects, frameworks and design patterns. Don't get me started about being responsible and, <em>shudder</em>, working-in-a-team.</p><p>I've always had a thing for C though. It gives you just enough help&nbsp;to make you think it's on your side before it stabs you in the back. It lends the intoxicating&nbsp;game of game development an edge that would otherwise be lacking.</p><p>Turns out,&nbsp;though, that C is pretty good for games where you want to keep a tight handle on memory management (i.e. avoid messing about with memory allocation during tight loops) and it's a brilliant way to avoid getting sucked into the whole whoops-I've-only-gone-and-built-an-entity-system-again problem.</p><p>What I'm trying to say is that it focuses the mind on the problem at hand and I find that I'm less likely to accidentally start building another engine I don't need because, well frankly it's just too much work in C.</p><p>I'm not really suggesting that you should make games from scratch in C. I do it because I'm self-indulgent and bloody-minded and frankly I can do what I like when I don't have the responsibility of working with a team of people.</p><p>What I'm edging towards is that sometimes it's interesting and mind-expanding to step outside the box and see what it's like to build things in a totally different way. It provides interesting perspectives and opens you up to all kinds of approaches and patterns of thought that you wouldn't encounter otherwise. Some of which will may prove&nbsp;useful when you've climbed back inside the box. If nothing else it really makes you appreciate why these tools do things the way they do, and what they're actually giving you.</p><p>Will it help you to ship a game? Um, well look at that, time's up.</p>]]></body>
    <date>Fri, 03 Oct 2014 09:11:30 GMT</date>
    <link>5kvzytveq</link>
  </post>
  <post>
    <postid>8xz7e15m1</postid>
    <title><![CDATA[I've written a game! Now what?]]></title>
    <body><![CDATA[<p><img src="http://lh4.ggpht.com/iqLvPiuFoCbSBqNEB56hSObkm-XQBl_at31TPmfDMg9mYHwexCLFpo9WrfRS-XV6zwH9PgWzxFRXGNtaRg=s600" alt="" /></p><p>Silence is golden. On the other hand, when it's the silence that greets the release of your&nbsp;pride and joy that you've spent the last year slaving away at, it's not so much golden as a disturbing brown.</p><p>Let's get anecdotal. I wrote a game called&nbsp;<a href="http://qb1-0.canfactory.com">QB1-0</a> and released it in December 2012 on the&nbsp;<a href="https://itunes.apple.com/us/app/qb1-0/id580175669?ls=1&amp;mt=8">iOS app store</a>. It's an arcade space shooter with a retro style. I like it, and I know for a fact that at least four other people do to. Some of us still play it.</p><p>It was greeted, predictably, with ... well, it wasn't really greeted at all. A handful of copies were purchased, mainly by friends and family. Not totally unexpected; after all who would know it existed?</p><p>I wrote QB1-0 in my spare time over the course of two years purely for the experience of writing and releasing&nbsp;it. During development&nbsp;I didn't harbour too many unrealistic notions that it would be some kind of run-away success. However, despite what I felt then,&nbsp;the instance the&nbsp;finished product was released&nbsp;out into the world I changed my mind.</p><p>Actually finishing a small but reasonably polished game is an achievement in itself. So why didn't anyone want to buy it?</p><p>Just for kicks let's list some possible reasons.</p><p><strong>It's not free.</strong></p><p>Yes, people won't buy a game if it's not free.&nbsp;People don't like the idea of dropping a small amount of cash (in this case 99c) on a game. Instead the cool kids are all downloading games for free and either putting up with ads or being suckered into spending more money via in-app purchases. So having an initial price tag is an instant barrier.</p><p>I just can't do it though. Ads offend the aesthetic, and in-app purchases just seem so ... grubby. In my mind a game should be a complete thing - you pay once and you have it. Plus you get free upgrades for life (*not a guarantee).</p><p>(NB. If my next game has in-app purchases I won't care. I'm shameless.)</p><p><strong>No one knows it's there</strong></p><p>I released this game into a vacuum. There was no development log, no twitter account with little progress updates, no trailers. It's a <em>massively</em>&nbsp;flooded market, with hundreds of other games being released all the time, of varying degrees of quality. I half-heartedly sent out some 'press releases' to a few of the bigger review sites, but I can't say I'm too surprised that I didn't hear anything.</p><p><strong>It's not good enough</strong></p><p>I said possible reasons - of course it's good enough! The feedback I've had is enough to encourage me that, yes, it is a fun game. I'm a single developer building this thing in my spare time. The game is a little lacking in depth but&nbsp;I took care to polish and tune it so that it was as good as I can make it. However, when you've got triple-A games selling in the app store for 99c, or worse, for <em>free</em>, it's difficult to compete.</p><p><strong>There's no market for it</strong></p><p>Now this one may be more to the point. I made a high-octane asteroids clone. Is there a market for that? Well probably, but it's not going to be mainstream. I didn't approach this from a business angle. There was no research to find out what people are playing, no pre-release buzz and the wrong monetisation model.</p><p>So poor old QB1-0 sat there and languished while I moved on to other things. I released a little update to fix a few bugs and add Game Centre support and put a gameplay trailer up on YouTube. However, that didn't help.</p><p>I wrote a&nbsp;<a href="http://pixelated.postagon.com/5g437329d">blog post</a> about the struggle of writing the game in my spare time. Miraculously that was pretty popular&nbsp;and stayed at the top of&nbsp;<a href="https://news.ycombinator.com/">Hacker News</a> for a day garnering around 16,000 views and a lively discussion thread (there's a lot of kindred spirits out there). That generated a nice little handful of sales and a few nice reviews in the app store, but in reality the blog audience (hi) aren't really the target market -&nbsp;I'm not saying you're all cheap, but ...</p><p>Encouraged by the blog&nbsp;success I put together another update for the game, adding iPad support and some graphics updates. That went out in May and, yes, you've guessed it disappeared under the waves without a trace.</p><p>Finally, a few weeks ago I put out a few more forum posts here and there and set up a profile on&nbsp;<a href="http://indedb.com">IndieDB</a>. The game was noticed by a really nice chap who reviewed it (<a href="http://indiegameenthusiast.blogspot.co.uk/2014/07/ios-spotlight-80-qb1-0.html">Indie Game Enthusiast</a>) and more importantly liked it!</p><p>(NB. seriously if you're into games and the indie scene - of course you are - follow&nbsp;<a href="http://twitter.com/IG_Enthusiast">@IG_Enthusiast</a> - he's been super supportive of the game, and syndicated his review to&nbsp;<a href="http://gamemob.com/news/indie-game-ios-spotlight-qb1-0/">GameMob</a>.)</p><p>Just the fact that there has been&nbsp;some really&nbsp;positive feedback from an&nbsp;independent and credible&nbsp;source&nbsp;has given me faith again, plus it taught me an insanely obvious lesson - you've got to get out there and hustle. For me the game development is the easy bit - it's the networking and the constant lookout for opportunities to promote that I find harder. It can be kind of fun too, but it really doesn't come naturally.</p><p>Follow me on Twitter&nbsp;<a href="https://twitter.com/joeyspacerocks" style="font-size: 20px;">@joeyspacerocks</a>. See, subtle huh?</p><p>So,&nbsp;I'll do another update and I'll continue with the next game&nbsp;because as long as there's&nbsp;one or two people who enjoy it, well that makes it all worthwhile.</p><p>So to any other indie devs out there in the same boat - yeah, the odds are against us but you can do a lot to improve them. Set up an&nbsp;<a href="http://indiedb.com">IndieDB</a> account. Get active on&nbsp;<a href="http://forums.tigsource.com">TigSource forums</a>. Twitter. (I can't bring myself to say Facebook, but you're probably already there.)</p><p>Be honest with yourself about the quality of your work.&nbsp;You'll get a ton of useful feedback and eventually someone will write some nice words about something you've built and it'll all be worth it.</p><p>Unless of course you threw caution to the wind, quit your job and do this for money. In that case I look forward to seeing your Match-3 with&nbsp;in-app purchases for extended&nbsp;play.</p><p>Almost forgot:&nbsp;<a href="https://itunes.apple.com/us/app/qb1-0/id580175669?ls=1&amp;mt=8">buy QB1-0 now</a>. It looks nice and smells of lemons. It's only&nbsp;99c and you get to play it as much as&nbsp;you want.</p>]]></body>
    <date>Sat, 19 Jul 2014 12:49:01 GMT</date>
    <link>8xz7e15m1</link>
  </post>
  <post>
    <postid>2186pw6nd</postid>
    <title><![CDATA[QB1-0 Review]]></title>
    <body><![CDATA[<p><a href="http://indiegameenthusiast.blogspot.co.uk/2014/07/ios-spotlight-80-qb1-0.html">Indie Game Enthusiast</a> posted a really good review for QB1-0 the other day ...</p><blockquote>QB1-0 released in 2012. It received a Universal update in May, a new trailer in June. I just discovered the game today. Searching online, I couldn't find a single review and that's a damn shame. If you're a fan of arcade shooters, I recommend giving OB1-0 a try ...<p>...a stylish frenetic arcade shooter with responsive controls, that fills the screen with particles and enemies and bullets, and for that reason, I think QB1-0 is worth checking out if you enjoy these kinds of games.</p></blockquote><p>The site is performing a brilliant service for indie&nbsp;gaming by championing the many&nbsp;overlooked games that might not otherwise be seen.&nbsp;<a href="http://indiegameenthusiast.blogspot.co.uk/2014/07/ios-spotlight-80-qb1-0.html">Check out the full review.</a></p>]]></body>
    <date>Thu, 17 Jul 2014 08:02:54 GMT</date>
    <link>2186pw6nd</link>
  </post>
  <post>
    <postid>6y6wx4mkv</postid>
    <title><![CDATA[QB1-0 version 1.2 released]]></title>
    <body><![CDATA[<p><img src="http://lh6.ggpht.com/t8KdvEf7Sgnd84AIZRlTnLIfZbzoNYWk4LClVrKE_LZrliRdYhq-n7WLl-SBFXcsVE6YMfjCk56CA0KWrB4=s600" alt="" /></p><p>Behold the full might of a marketing machine swinging into action.</p><p>Ahem.&nbsp;<a href="https://itunes.apple.com/us/app/qb1-0/id580175669?ls=1&amp;mt=8">Version 1.2 of QB1-0</a> was released on the App Store&nbsp;months ago and I've finally got around to mentioning it here.</p><p>But that's not all! There's a new trailer as well!</p><iframe width="853" height="480" src="//www.youtube.com/embed/sif7dsV8yvo?rel=0" frameborder="0" allowfullscreen=""></iframe><p>So what's new? The biggest change is that it's now a Universal app, and so is available for both iPad and iPhone. Additionally there are some graphical improvements and a couple of bug fixes.
</p><p>There you have it.</p><p>Marketing.</p>]]></body>
    <date>Fri, 11 Jul 2014 15:01:11 GMT</date>
    <link>6y6wx4mkv</link>
  </post>
  <post>
    <postid>5g437329d</postid>
    <title><![CDATA[How to write a 48-hour game in just 2 years]]></title>
    <body><![CDATA[<p><img src="http://lh4.ggpht.com/u9gHkny_kQD-orsrgsMOmTIT-Ehdei35S0HEw3pt_EQxQvIqtnP8C76wsR2LoUoW5pq1t7nf8Z7EkpcQGsU0=s600" alt="" /></p><p><strong>(or how to make, and finish, video games in your spare time)</strong></p>
<p>Two years ago I was browsing through the <a href="http://www.ludumdare.com/compo/ludum-dare-21/?action=preview&amp;uid=398">results</a> of a 48-hour games jam and felt inspired to try my hand at something similar.</p>
<p>Asteroids, I thought. That's the kind of thing I could do in 48 hours. I know my limits.</p>
<p>48 hours later my iPhone was displaying a black screen with a white triangle on it. Clearly my limits were being tested.</p>
<p>The problem, I realised, was two-fold. Firstly I had decided to implement the game in C on an iPhone (<a href="http://pixelated.postagon.com/5kvzytveq">the subject of a future post</a>). The second was that I had failed to get into a true hacking mindset.</p>
<p>In my <a href="http://www.canfactory.com">day job</a> I build biggish commercial websites, mobile apps and other assorted software projects. The terms <em>enterprise</em> and <em>blue chip</em> are bandied about. If you do enough of that kind of thing you soon start to appreciate code with an air of rigorousness and structure, especially when it requires nurturing over periods of years.</p>
<p>I constantly have side-projects on the go, but they are nearly all fragmentary and nebulous affairs where my goal is to investigate and learn, rather than to actually make something, and even here I tend to adopt a fairly rigorous approach.</p>
<p>Letting go of all that to try and hack something together in 48 hours proves difficult, and clearly requires a peculiar discipline of its own.</p>
<p>Fortunately that lonely white triangle adrift in the infinite vacuum inspired me to continue.</p>
<p>Over the next three months I poked and tweaked the code during lunch times and the odd evening, slowly morphing the prototype into something more complete.</p>
<p>Then I hit a wall, inexplicably losing momentum and the project languished, lonely and forgotten for the next seven months.</p>
<p>A chance encounter with a game development blog inexplicably sparked my interest again. I was reinvigorated and, flushed with purpose I opened up XCode, only to be confronted with yet another iOS upgrade. By the time I'd downloaded the new version and fixed various issues it identified with the project format I'd run out of time and energy to continue.</p>
<p>Time passed ... (another three months). At this point I had the basics sorted. Some wireframe graphics, scores, lives asteroids and a smattering of foes. I'd open the project and stare at the code, daydream a bit and shut it down again.</p>
<p>Start. Added some power-ups.</p>
<p>Stop. Four months passed.</p>
<p>Finally I tired of my inability to progress. I called a halt to this stop-start development program and decided that it was time I actually finished something. I jotted down some basic rules that led me from half finished to completion in about three months.</p>
<p>And then ... <a href="https://itunes.apple.com/gb/app/qb1-0/id580175669">published on the App Store</a>! For the first time in my life I'd followed a (self-driven) project through to completion and now I actually had something up and on sale.</p>
<p>It may not sound like much; after all, my game is one of many Asteroids clones on the App Store. However if you spend even a small amount of time browsing game development forums you'll soon realise just how rare it is that a part-time game development project is completed.</p>
<p>Here's some rules I eventually followed that helped me make the transition from a wannabe games developer to an actual games developer.</p>
<hr>
<h2>Start simple</h2>
<p>Let's say you're a fairly experienced programmer of some sort. Go on, flatter yourself. Despite your experience you really aren't going to build a MMORG. You really aren't. You're never going to finish it.</p>
<h2>Resist adding new features</h2>
<p>Your game is coming along nicely. You've a protagonist, some levels, some bad guys. Let's add another bad guy; a few more weapon types; a boss level; some cut scenes; online play. Uh oh, look what's happened. You're never going to finish it.</p>
<h2>Time-slice your work</h2>
<p>As a part-time games programmer with a full time job, a family and a social life (I'm projecting here; this is not from experience) you don't actually have that much spare time to develop your game. Spare time crops up unexpectedly and just when you've got all your toys out and are set to start, it's gone again.</p>
<p>To counteract this you need to do a little bit of advanced planning. Always have the next task ready and divide the work up into little chunks. The next time you find yourself with a bit of spare time you're all set and ready to roll.</p>
<p>If you don't have a handy half hour task, well use the time to create some for next time.</p>
<h2>Don't build an engine instead of a game</h2>
<p>Building engines, libraries and frameworks is fun. Unfortunately it won't help you finish writing a game. It might help you write the next one, but that's a hypothetical scenario at the moment. Write the minimum code you can to achieve what <em>this</em> game needs, not what the next one might.</p>
<h2>Know when to stop</h2>
<p>With self-driven projects it's hard to know when to call a halt to the work and just get it out there. With QB1-0 I fell into a long cycle of making little tweaks, or listing things I really should do before I pushed it. But none of it mattered - the main game was done, none of these things would make or break it.</p>
<hr>
<p>Seriously - that's it. Most IT projects fail because of scope-creep, bad estimates and being afraid to ship. Single-developer side-projects are no different.</p>
<p>If I was being cynical I might now note that developing your game turns out to be the easy bit. Getting people to buy it ... well that's a whole different kettle of ball games.</p>
<p><a href="https://itunes.apple.com/gb/app/qb1-0/id580175669">(QB1-0 is available at a very reasonable price)</a></p>]]></body>
    <date>Fri, 26 Jul 2013 12:18:28 GMT</date>
    <link>5g437329d</link>
  </post>
</posts>
