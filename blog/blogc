#!/usr/bin/perl -w

use Text::Caml;

my $src_path = './posts/';
my $tmpl_path = './templates/';
my $dest_path = './out/';


opendir(my $dh, $src_path) || die "can't opendir $src_path: $!";
my @files = readdir($dh);
closedir $dh;

mkdir $dest_path;

my $index = [];

# loop over src files (newest -> oldest)

foreach my $f (@files) {
    next unless ($f =~ /\.txt$/);

    my $dest = $f;
    $dest =~ s/\.txt$/\.html/;

    my $src = read_src($src_path.$f);

    write_post($src, $tmpl_path.'post.html', $dest_path);
    
	push(@$index, $src);
}

# sort index date descending

my @sorted = (sort { $b->{'date'} cmp $a->{'date'} } @$index);
my @top_five = splice @sorted, 0, 5;

# merge listing info with index template

write_post({'posts'=>\@top_five, 'url'=>'index'}, $tmpl_path.'index.html', $dest_path);

# switch git branch to master
system('git checkout master');
# copy output HTML files to blog root
system('cp -r out/*.html .');
# git commit files
system('git add *.html');
system('git commit -m "Blog update"');

sub format_date {
	my ($date) = @_;
	my ($y, $m, $d) = $date =~ /^(\d\d\d\d)(\d\d)(\d\d)$/;
	return $d.' '.('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')[$m - 1].' '.$y;
}

sub process_template {
    my ($src, $tmp) = @_;
    my $view = Text::Caml->new;
    return $view->render_file($tmp, $src);
}

sub write_post {
    my ($src, $tmp, $dest_path) = @_;
    my $out = process_template($src, $tmp);
    
    my $filename = "$dest_path/$src->{'url'}.html";
    open(my $fh, '>', $filename) or die "Could not open file '$filename' $!";
    print $fh $out;
    close $fh;
}

sub read_src {
    my ($f) = @_;

    my $inh = -1;
    my $src = { content=>''};

    open $fh, $f || die "can't open $f: $!";
    while (my $line = <$fh>) {
        chomp $line;
        
        if ($inh) {
            if ($line =~ /^\s*([^:]+):\s*(.+)$/) {
                $src->{$1} = $1 eq 'date' ? format_date($2) : $2;
            
            } elsif ($line =~ /^\s*$/) {
                $inh = 0;
            }
        
        } else {
            $src->{'content'} .= "$line\n";
        }
    }
    close $fh;

    $src->{'blurb'} = extract_blurb($src->{'content'});

    return $src;
}

sub extract_blurb {
    my ($content) = @_;
    
    my $blurb = $content;
    my $maxlength = 120;
    
    # strip anything not in <p> tags
    
    $blurb =~ s/<[^>]+>//g;
    $blurb =~ s/\n+|\t+|\s+/ /g;
    $blurb =~ s/^(.{0,$maxlength})\b.*$/$1.../s;
    
    return $blurb;
}
